<?xml version="1.0" encoding="UTF-8"?>
<project name="tpb" default="dist-war" basedir=".">

    <!-- =================================================================== -->
    <!-- common properties                                                   -->
    <!-- =================================================================== -->
    <property environment="env"/>
    <property name="app.name" value="tpb"/>
    <property name="src.java.dir" value="src/java"/>
    <property name="utest.java.dir" value="utest/java"/>
    <property name="src.web.dir" value="src/webapp"/>
    <property name="conf.dir" value="conf"/>
    <property name="etc.dir" value="etc"/>
    <property name="webcontent.dir" value="webcontent"/>
    <property name="lib.dir" value="lib"/>
    <property name="build.dir" value="build"/>
    <property name="build.classes.dir" value="${build.dir}/classes"/>
    <property name="build.utest.dir" value="${build.dir}/utest"/>
    <property name="build.utest.classes.dir" value="${build.utest.dir}/classes"/>
    <property name="build.utest.report.dir" value="${build.dir}/junit/report"/>
    <property name="javadoc.version" value="1.0"/>

    <!-- =================================================================== -->
    <!-- distribute directory                                                -->
    <!-- =================================================================== -->
    <property name="dist.dir" value="dist"/>
    <property name="dist.war.dir" value="${dist.dir}/war"/>
    <property name="dist.src.tar.dir" value="${dist.dir}/tar"/>
    <property name="dist.db.schema.dir" value="${dist.dir}/sql"/>
    <property name="dist.javadoc.dir" location="${dist.dir}/docs/api"/>
    <property name="dist.pack.tmp.dir" value="${dist.dir}/tmp"/>
    <property name="dist.pack.tmp.app.dir" value="${dist.pack.tmp.dir}/${app.name}"/>
    <property name="dist.pack.tmp.app.web-inf.dir" value="${dist.pack.tmp.app.dir}/WEB-INF"/>
    <property name="dist.pack.tmp.app.classes.dir" value="${dist.pack.tmp.app.web-inf.dir}/classes"/>
    <property name="dist.pack.tmp.app.lib.dir" value="${dist.pack.tmp.app.web-inf.dir}/lib"/>
    <property name="dist.pack.tmp.app.install.dir" value="${dist.pack.tmp.app.web-inf.dir}/install"/>
    <property name="dist.pack.tmp.app.install.conf.dir" value="${dist.pack.tmp.app.install.dir}/conf"/>
    <property name="dist.pack.tmp.app.install.web.dir" value="${dist.pack.tmp.app.install.dir}/web"/>

    <!-- =================================================================== -->
    <!-- developing deploy directory 										 -->
    <!-- =================================================================== -->
    <property name="deploy.dir" value="deploy"/>
    <property name="deploy.app.dir" value="${deploy.dir}/${app.name}"/>
    <property name="deploy.app.web-inf.dir" value="${deploy.app.dir}/WEB-INF"/>
    <property name="deploy.app.classes.dir" value="${deploy.app.dir}/WEB-INF/classes"/>
    <property name="deploy.app.lib.dir" value="${deploy.app.dir}/WEB-INF/lib"/>
    <property name="deploy.app.install.dir" value="${deploy.app.dir}/WEB-INF/install"/>


    <!-- =================================================================== -->
    <!-- Build classpath , db schema lib classpath, utest classpath          -->
    <!-- =================================================================== -->
    <path id="build.classpath">
        <fileset dir="${lib.dir}/core_lib">
            <include name="**/*.jar"/>
        </fileset>
        <fileset dir="${lib.dir}/xml_lib">
            <include name="**/*.jar"/>
        </fileset>
        <fileset dir="${lib.dir}/compile_lib">
            <include name="**/*.jar"/>
        </fileset>
    </path>

    <path id="db_schema_export.classpath">
        <path refid="build.classpath"/>
    </path>

    <path id="utest.classpath">
        <path refid="build.classpath"/>
        <pathelement location="${build.classes.dir}"/>
        <pathelement location="${build.utest.classes.dir}"/>
    </path>

    <!-- =================================================================== -->
    <!-- Cleans up compiled classes                                          -->
    <!-- =================================================================== -->
    <target name="clean">
        <echo>Deleting the build classes directory</echo>
        <delete dir="${build.dir}"/>
        <mkdir dir="${build.dir}"/>
    </target>

    <!-- =================================================================== -->
    <!-- Cleans up all                                                       -->
    <!-- =================================================================== -->
    <target name="clean-all">
        <echo>Deleting the build classes, deploy directories</echo>
        <delete dir="${build.dir}"/>
        <delete dir="${deploy.dir}"/>
        <delete dir="${dist.dir}"/>
        <mkdir dir="${build.dir}"/>
    </target>

    <!-- =================================================================== -->
    <!-- Prepares the build directories                                      -->
    <!-- =================================================================== -->
    <target name="prepare" depends="clean">
        <mkdir dir="${build.classes.dir}"/>
    </target>

    <!-- =================================================================== -->
    <!-- Compiles the source code                                            -->
    <!-- =================================================================== -->
    <target name="compile" depends="prepare" description="compiling the source files">
        <javac srcdir="${src.java.dir}" destdir="${build.classes.dir}" debug="on" deprecation="on" optimize="off"    includeantruntime="false" includes="**">
            <classpath refid="build.classpath"/>
            <compilerarg line="-Xlint:'-unchecked'"/>
        </javac>
        <copy todir="${build.classes.dir}">
            <fileset dir="${src.java.dir}">
                <include name="**/*.xml"/>
                <include name="**/*.properties"/>
            </fileset>
        </copy>

        <copy todir="${build.classes.dir}">
            <fileset dir="${conf.dir}">
                <include name="**/log4j.properties"/>
            </fileset>
        </copy>

        <copy todir="${build.classes.dir}">
            <fileset dir="${etc.dir}/persistence">
                <include name="**/*.*"/>
            </fileset>
            <fileset dir="${etc.dir}/struts2">
                <include name="**/*.*"/>
            </fileset>
            <fileset dir="${etc.dir}/rda">
                <include name="**/*.*"/>
            </fileset>
           <!--
            <fileset dir="${etc.dir}/db">
                <include name="**/*.*"/>
            </fileset>
            -->
            <fileset dir="etc/mail">
                <include name="**/*.*"/>
            </fileset>
        </copy>
    </target>

    <!-- =================================================================== -->
    <!-- generate a dev integration deploy directory                                         -->
    <!-- =================================================================== -->
    <target name="generate-dev-test-deploy-dir" depends="compile">
        <delete dir="${deploy.dir}"/>
        <mkdir dir="${deploy.dir}"/>
        <mkdir dir="${deploy.app.dir}"/>
        <mkdir dir="${deploy.app.classes.dir}"/>
        <mkdir dir="${deploy.app.lib.dir}"/>

        <copy todir="${deploy.app.dir}">
            <fileset dir="${webcontent.dir}">
                <include name="**/*.*"/>
            </fileset>
        </copy>

        <copy todir="${deploy.app.dir}">
            <fileset dir="${src.web.dir}">
                <include name="**/*.*"/>
            </fileset>
        </copy>

        <copy todir="${deploy.app.classes.dir}">
            <fileset dir="${build.classes.dir}">
                <include name="**/*.*"/>
            </fileset>
        </copy>

        <copy todir="${deploy.app.classes.dir}">
            <fileset dir="${conf.dir}">
                <include name="**/*.*"/>
                <exclude name="web.xml"/>
            </fileset>
        </copy>

        <copy todir="${deploy.app.lib.dir}">
            <fileset dir="${lib.dir}/core_lib">
                <include name="**/*.jar"/>
            </fileset>
            <fileset dir="${lib.dir}/xml_lib">
                <include name="**/*.jar"/>
            </fileset>
        </copy>
        <copy todir="${deploy.app.web-inf.dir}">
            <fileset dir="${conf.dir}">
                <include name="**/web.xml"/>
            </fileset>
        </copy>
    </target>

    <!-- =================================================================== -->
    <!-- sync dev web to tomcat - freemarker file, css, js and images           -->
    <!-- =================================================================== -->
    <target name="sync-dev-web-to-tomcat">
        <copy todir="${deploy.app.dir}">
            <fileset dir="${src.web.dir}">
                <include name="**/*.*"/>
            </fileset>
        </copy>
        <copy todir="${deploy.app.dir}">
            <fileset dir="${webcontent.dir}">
                <include name="**/*.*"/>
            </fileset>
        </copy>
    </target>

    <!-- =================================================================== -->
    <!-- generate a dist directory                                         -->
    <!-- =================================================================== -->
    <target name="generate-dist-dir" depends="compile">
        <delete dir="${dist.dir}"/>
        <mkdir dir="${dist.dir}"/>
        <mkdir dir="${dist.pack.tmp.dir}"/>
        <mkdir dir="${dist.pack.tmp.app.dir}"/>
        <mkdir dir="${dist.pack.tmp.app.classes.dir}"/>
        <mkdir dir="${dist.pack.tmp.app.lib.dir}"/>

        <copy todir="${dist.pack.tmp.app.dir}">
            <fileset dir="${webcontent.dir}">
                <include name="**/*.*"/>
            </fileset>
        </copy>

        <copy todir="${dist.pack.tmp.app.dir}">
            <fileset dir="${src.web.dir}">
                <include name="**/*.*"/>
            </fileset>
        </copy>

        <copy todir="${dist.pack.tmp.app.classes.dir}">
            <fileset dir="${build.classes.dir}">
                <include name="**/*.*"/>
            </fileset>
        </copy>

        <copy todir="${dist.pack.tmp.app.lib.dir}">
            <fileset dir="${lib.dir}/core_lib">
                <include name="**/*.jar"/>
            </fileset>
            <fileset dir="${lib.dir}/xml_lib">
                <include name="**/*.jar"/>
            </fileset>
        </copy>

        <copy todir="${dist.pack.tmp.app.classes.dir}">
            <fileset dir="${conf.dir}">
                <include name="**/*.*"/>
                <exclude name="web.xml"/>
            </fileset>
        </copy>

        <copy todir="${dist.pack.tmp.app.web-inf.dir}">
            <fileset dir="${conf.dir}">
                <include name="**/web.xml"/>
            </fileset>
        </copy>
    </target>

    <!-- =================================================================== -->
    <!-- distribution preparing                                                -->
    <!-- =================================================================== -->
    <target name="prepare-dist" depends="generate-dist-dir">
        <echo>preparing a dist war</echo>
        <delete dir="${dist.war.dir}"/>
        <mkdir dir="${dist.war.dir}"/>
    </target>

    <!-- =================================================================== -->
    <!-- packing a war file                                                  -->
    <!-- =================================================================== -->
    <target name="dist-war" depends="prepare-dist" description="packing the war">
        <jar destfile="${dist.war.dir}/${app.name}.war" basedir="${dist.pack.tmp.app.dir}"/>
        <delete dir="${dist.pack.tmp.dir}"/>
    </target>

    <!-- =================================================================== -->
    <!-- generate a dist integration deploy directory                        -->
    <!-- =================================================================== -->
    <target name="generate-dist-test-deploy-dir" depends="generate-dist-dir">
        <delete dir="${deploy.dir}"/>
        <mkdir dir="${deploy.dir}"/>
        <copy todir="${deploy.dir}">
            <fileset dir="${dist.pack.tmp.dir}">
                <include name="**/*.*"/>
            </fileset>
        </copy>
    </target>


    <!-- =================================================================== -->
    <!-- reference a hibernatetool task                                      -->
    <!-- =================================================================== -->
    <taskdef name="hibernatetool" classname="org.hibernate.tool.ant.HibernateToolTask"
             classpathref="db_schema_export.classpath"/>
    <!-- =================================================================== -->
    <!-- export the database schema from the annotation domain objects       -->
    <!-- =================================================================== -->
    <target name="export-db-schema" depends="compile" description="Exports DDL to file in build directory">
        <delete dir="${dist.db.schema.dir}"/>
        <mkdir dir="${dist.db.schema.dir}"/>

        <hibernatetool destdir="${dist.db.schema.dir}">
            <classpath path="${build.classes.dir}"/>
            <jpaconfiguration persistenceunit="domain_ps_unit"/>
            <hbm2ddl drop="true" create="true" export="false" outputfilename="${app.name}_ddl.sql" delimiter=";"
                     format="true" haltonerror="true"/>
        </hibernatetool>
    </target>
    <!--
    <target name="schemaexport" depends="compile">
        <delete dir="${dist.db.schema.dir}"/>
        <mkdir dir="${dist.db.schema.dir}"/>
        <taskdef name="schemaexport" classname="org.hibernate.tool.hbm2ddl.SchemaExportTask"
                 classpathref="build.classpath"/>
        <property name="hibernate.dialect">org.hibernate.dialect.PostgreSQL82Dialect</property>
        <schemaexport
                create="yes"
                quiet="no"
                text="no"
                drop="no"
                delimiter=";"
                output="${dist.db.schema.dir}/${app.name}_ddl.sql">
        </schemaexport>
    </target>
    -->
    <!-- =================================================================== -->
    <!-- compile the unit test classes                                       -->
    <!-- =================================================================== -->
    <target name="utest_compile" depends="compile">
        <mkdir dir="${build.utest.classes.dir}"/>
        <javac srcdir="${utest.java.dir}" destdir="${build.utest.classes.dir}" debug="debug" deprecation="deprecation"
               optimize="optimize">
            <classpath refid="utest.classpath"/>
            <include name="**/*Test.java"/>
        </javac>
        <copy todir="${build.utest.classes.dir}">
            <fileset dir="${conf.dir}">
                <include name="*.xml"/>
                <include name="**/*.properties"/>
                <exclude name="**/struts.xml"/>
                <exclude name="**/web.xml"/>
                <exclude name="**/validators.xml"/>
            </fileset>
        </copy>
    </target>

    <!-- =================================================================== -->
    <!--     run the unit test classes                                       -->
    <!-- =================================================================== -->
    <target name="utest" depends="utest_compile" description="Run unit testing">
        <mkdir dir="${build.utest.report.dir}"/>
        <junit dir="${build.utest.dir}" forkmode="perBatch" printsummary="yes" haltonfailure="yes" haltonerror="yes">
            <jvmarg line="-Djava.awt.headless=true -Xmx2048m -XX:MaxPermSize=512m"/>
            <classpath refid="utest.classpath"/>
            <formatter type="xml"/>
            <batchtest fork="yes" todir="${build.utest.report.dir}">
                <fileset dir="${build.utest.classes.dir}">
                    <include name="**/*Test.class"/>
                </fileset>
            </batchtest>
        </junit>
    </target>

    <!-- =================================================================== -->
    <!--     make the whole source code as a tar file                        -->
    <!-- =================================================================== -->
    <target name="generate.src.tar" depends="clean-all">
        <echo message="Tar the source code ... "/>
        <delete dir="${dist.src.tar.dir}"/>
        <mkdir dir="${dist.src.tar.dir}"/>
        <jar destfile="${dist.src.tar.dir}/${app.name}-${javadoc.version}-src.tar">
            <tarfileset dir=".">
                <exclude name="${dist.dir}/**"/>
            </tarfileset>
        </jar>
        <echo message="Tar the source code completed !"/>
    </target>


    <!-- =================================================================== -->
    <!--    generates the java api docs                                      -->
    <!-- =================================================================== -->
    <target name="generate-javadoc" depends="clean">
        <javadoc destdir="${dist.javadoc.dir}" use="true" windowtitle="The Proteome Browser" classpathref="build.classpath">
            <packageset dir="${src.java.dir}" defaultexcludes="yes">
                <exclude name="xslt/"/>
                <exclude name="META-INF/"/>
                <exclude name="**/*.xml"/>
                <exclude name="**/*.properties"/>
            </packageset>
            <doctitle>
                <![CDATA[<h2>Java API for The Proteome Browser, version ${javadoc.version}<br/>
												               API Specification<br/>
			</h2>]]>
            </doctitle>
            <bottom>
                <![CDATA[<i>Copyright &#169; 2012-2013 Monash University, e-Research Centre, Australia. All Rights Reserved.</i>]]>
            </bottom>
        </javadoc>
        <echo message="The Proteome Browser Java API v${javadoc.version} Javadoc Generated !!"/>
    </target>

    <target name="zip-javadoc" depends="generate-javadoc">
        <jar destfile="${dist.dir}/docs/${app.name}-${javadoc.version}-Java-API.zip">
            <tarfileset dir="${dist.javadoc.dir}">
                <include name="**/*.*"/>
            </tarfileset>
        </jar>
        <echo message="zip the Java-API docs completed!"/>
    </target>
</project>


